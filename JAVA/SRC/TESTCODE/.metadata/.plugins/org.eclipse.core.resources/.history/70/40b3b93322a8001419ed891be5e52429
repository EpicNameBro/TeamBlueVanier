package dbaApp;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/**
 * @author Jonathan Del Corpo
 * BLUETEAMVANIER
 *
 */
public class TableDisplay extends JFrame {


	private static final long serialVersionUID = -402021750767950738L;
	private JPanel contentPane;
	private JTable dataTable = new JTable();

	final private JScrollPane scrollPane;
	final DBConnector db = new DBConnector();
	
	private DefaultListModel<String> model = new DefaultListModel<String>();
	private JList<String> tableNameList;
	private String selectedTable;
	
	private JPanel dataInsertPanel;
	private JButton insertButton;
	private JPanel insertPanel;
	private JScrollPane insertScrollPane ;
	private ArrayList<JTextField> insertTextFields = new ArrayList<JTextField>();
	private JButton btnEdit;
	
	
	//holds any changes made to data
	private ArrayList<String[]> dataChanges = new ArrayList<String[]>();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					TableDisplay frame = new TableDisplay();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public TableDisplay() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("icon.png"));
		setTitle("Blue Team Vanier");
		
		//minimum size that the window can be resized to
		setMinimumSize(new Dimension(450, 300));
		
		try 
		{
			//Makes Gui look like a windows application
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		contentPane.add(tabbedPane, BorderLayout.CENTER);
		
		JPanel dataViewPanel = new JPanel();
		tabbedPane.addTab("Data View", null, dataViewPanel, null);
		dataViewPanel.setLayout(new BorderLayout(0, 0));
		
		scrollPane = new JScrollPane();
		dataViewPanel.add(scrollPane, BorderLayout.CENTER);
		
		JPanel panel = new JPanel();
		dataViewPanel.add(panel, BorderLayout.SOUTH);
		
		btnEdit = new JButton("Apply");
		btnEdit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		panel.add(btnEdit);
		
		JButton btnDelete = new JButton("Delete");
		panel.add(btnDelete);
		
		
		//Delete button.When clicked, the selected row will be deleted from the database
		btnDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				//confirmation dialog box to confirm delete with user
				if(JOptionPane.showConfirmDialog(contentPane, "Are you sure you want to delete?", "Confirm", 0) == 0)
				{
					db.deleteRow(selectedTable, db.getColumnNames(selectedTable)[0].toString(), dataTable.getValueAt(dataTable.getSelectedRow() , 0).toString());
					
					refreshData();
				}
				
			}
		});
		
		dataInsertPanel = new JPanel();
		tabbedPane.addTab("Data Insert", null, dataInsertPanel, null);
		dataInsertPanel.setLayout(new BorderLayout(0, 0));
		//dataInsertPanel.add(panel_5);
		
		insertButton = new JButton("Insert");
		dataInsertPanel.add(insertButton, BorderLayout.SOUTH);
		
		
		//button used to insert data into the database
		insertButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String [] values = new String[insertTextFields.size()];
				
				//loads in all the input data from the text fields into an array
				for(int i = 0 ; i < values.length ; i++)
				{
					values[i] = insertTextFields.get(i).getText();
				}
				
				db.insert(selectedTable,values);
				refreshData();
			}
		});
		
		insertScrollPane = new JScrollPane();
		insertScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		//insertScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		dataInsertPanel.add(insertScrollPane);
		
		insertPanel = new JPanel();
		insertScrollPane.setViewportView(insertPanel);
		insertPanel.setLayout(new GridLayout(0, 1, 0, 0));
		
		JPanel toolBarPanel = new JPanel();
		contentPane.add(toolBarPanel, BorderLayout.SOUTH);
		
		JButton btnNewButton = new JButton("Refresh data");
		toolBarPanel.add(btnNewButton);
		
		tableNameList = new JList<String>(model);
		
		//The list of tables on the left. If you select a table name, the data presented will be changed to that tables data
		tableNameList.addListSelectionListener(new ListSelectionListener() {
			@SuppressWarnings("unchecked")
			public void valueChanged(ListSelectionEvent e) 
			{
				if (!e.getValueIsAdjusting())//This line prevents double events
				{
					//target that invoked the event
					JList<String> jl =  (JList<String>) e.getSource();
					
					if(jl.getSelectedValue() != null)//to prevent null pointer exception
					{
						//get the name of the selected table
						selectedTable = jl.getSelectedValue().toString();
						refreshData();
					}	
				}
			}
		});
		
		JScrollPane tableNameScrollPane = new JScrollPane();
		contentPane.add(tableNameScrollPane, BorderLayout.WEST);
		tableNameScrollPane.setPreferredSize(new Dimension(100, 20));
		tableNameScrollPane.setViewportView(tableNameList);
		tableNameList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
		tableNameList.setLayoutOrientation(JList.VERTICAL);
		tableNameList.setVisibleRowCount(-1);
		
		
		//provide login info for database
		/*db.setLoginInfo(
						"jdbc:oracle:thin:@" + 
						JOptionPane.showInputDialog("Enter host address") + ":1521:" +
						JOptionPane.showInputDialog("Enter SID"),
						JOptionPane.showInputDialog("Enter username"),
						JOptionPane.showInputDialog("Enter password"));*/
		
		
		//connect to the databse
		db.connect();
		
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				refreshData();
			}
		});
		

		
		//automatically sets the current talbe to the first one in the list
		selectedTable = db.getDatabaseTables()[0];
		refreshData();
	}
	
	/**
	 * Refreshes data view in the case that changes where made.
	 */
	public void refreshData()
	{
		//gets all the rows from a table
		String[][] rows = db.getAllRows(selectedTable,db.getColumnNames(selectedTable)[0]);
		
		
		//gets all the column names of a table
		String[] names = db.getColumnNames(selectedTable);
		
		//resets the panel for other components to replace the previous ones
		insertPanel.removeAll();
		
		
		/*JPanel insertButtonPanel = new JPanel();
		insertButtonPanel.add(insertButton);
		
		
		insertPanel.add(insertButtonPanel);*/
		
		//add an empty jlabel to properly space out components
		//insertPanel.add(new JLabel());
		
		//clear the array of textfields to remove the ones from the previous table
		insertTextFields.clear();
		
		//add as many labels and text fields as there are columns in the table
		for(int i = 0 ; i < names.length ; i++)
		{
			JPanel panel = new JPanel();
			JLabel label = new JLabel(names[i]);
			JTextField textField = new JTextField(15);
			
			panel.add(label);
			insertPanel.add(panel);
			
			panel = new JPanel();
			panel.add(textField);
			insertPanel.add(panel);
			
			//add the textfield to an array to be used when inserting
			insertTextFields.add(textField);
		}
		
		//re-renders the panel since its graphical information has changed
		dataInsertPanel.revalidate();
		dataInsertPanel.repaint();
		
		//refresh the table
		dataTable = new JTable(rows, names);
		scrollPane.setViewportView(dataTable);
		
		
		model.clear();
		tableNameList = new JList<String>(model);
		String[] tableNames = db.getDatabaseTables();
		
		//set the table names to the list
		for(int i = 0 ; i < tableNames.length ; i++)
		{
			model.addElement(tableNames[i]);
		}
		
		dataTable.getModel().addTableModelListener(
		new TableModelListener() 
		{
		    public void tableChanged(TableModelEvent e) 
		    {
		       System.out.println(dataTable.getModel().getValueAt(dataTable.getSelectedRow(), 0));
		       
		    }
		});
	}
	
}
